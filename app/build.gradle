plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services'
    id 'com.google.dagger.hilt.android'
    id 'androidx.navigation.safeargs.kotlin'
    id 'jacoco'
    id 'dagger.hilt.android.plugin'
    id 'kotlinx-serialization'
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))
}

jacoco {
    toolVersion = "0.8.8"
}

def localProperties = new Properties()
localProperties.load(new FileInputStream(rootProject.file("local.properties")))

android {
    compileSdkVersion 33
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.moonlightbutterfly.cryptohub"
        minSdkVersion 23
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"
    }

    buildFeatures {
        // Enables Jetpack Compose for this module
        compose true
        viewBinding true
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                jacoco.excludes = ['jdk.internal.*']
            }
        }
        unitTests.returnDefaultValues = true
    }

    buildTypes {
        debug {
            buildConfigField("String", "API_KEY", "\"" + localProperties['coinMarketCapKey'] + "\"")
            testCoverageEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.3.1'
        kotlinCompilerVersion "1.7.10"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    packagingOptions {
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
    }
}
configurations.all{
    resolutionStrategy {
        eachDependency { details ->
            if ('org.jacoco' == details.requested.group) {
                details.useVersion "0.8.8"
            }
        }
    }
}
dependencies {
    implementation project(':domain')
    implementation project (':data')
    implementation project (':presentation')

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.9.1'
    implementation "com.google.dagger:hilt-android:2.44"
    implementation "androidx.hilt:hilt-navigation-compose:1.0.0"
    kaptAndroidTest 'com.google.dagger:hilt-android-compiler:2.44'
    kapt 'com.google.dagger:hilt-android-compiler:2.44'
    androidTestImplementation("com.google.dagger:hilt-android-testing:2.44")
    implementation("androidx.core:core-splashscreen:1.0.0")
    implementation 'androidx.hilt:hilt-work:1.0.0'
    implementation "androidx.work:work-runtime-ktx:2.8.0"
    implementation 'com.jakewharton.timber:timber:5.0.1'
}